apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: normalize-token-request
  namespace: default
spec:
  workloadSelector:
    labels:
      app: authservice
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_OUTBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: envoy.filters.http.router
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.buffer
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.buffer.v3.Buffer
            max_request_bytes: 1048576
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_OUTBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: envoy.filters.http.router
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inlineCode: |
              local function starts_with(s, p) return s and s:sub(1, #p) == p end
              local b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
              local function b64dec(data)
                data = (data or ''):gsub('[^'..b64chars..'=]', '')
                return (data:gsub('.', function(x)
                  if x == '=' then return '' end
                  local r,f='',(b64chars:find(x)-1)
                  for i=6,1,-1 do r=r..(f%2^i - f%2^(i-1) > 0 and '1' or '0') end
                  return r
                end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(bits)
                  if #bits ~= 8 then return '' end
                  local c=0
                  for i=1,8 do c = c + (bits:sub(i,i)=='1' and 2^(8-i) or 0) end
                  return string.char(c)
                end))
              end
              local function urldecode(s) return (s or ''):gsub('%%(%x%x)', function(h) return string.char(tonumber(h,16)) end) end
              local function urlencode(s) return (s or ''):gsub('([^%w%-_%.~])', function(c) return string.format("%%%02X", string.byte(c)) end) end

              function on_request(handle)
                local h = handle:headers()
                local host = h:get(":authority") or ""
                local path = h:get(":path") or ""
                if (host ~= "host.k3d.internal" and host ~= "host.k3d.internal:8081") then return end
                if not starts_with(path, "/realms/demo/protocol/openid-connect/token") then return end

                local ct = h:get("content-type") or ""
                if not ct:find("application/x-www-form-urlencoded", 1, true) then return end

                local body = handle:body()
                if not body then return end
                local data = body:getBytes(0, body:length()) or ""
                if data == "" then return end

                -- Parse form
                local params = {}
                for pair in string.gmatch(data, "([^&]+)") do
                  local eq = pair:find("=")
                  if eq then
                    local k = urldecode(pair:sub(1, eq-1))
                    local v = pair:sub(eq+1)
                    params[k] = v
                  end
                end

                -- If Authorization: Basic present, extract client_id and then remove the header
                local auth = h:get("authorization") or h:get("Authorization")
                if auth and auth:match("^%s*[Bb]asic%s+") then
                  local b64 = auth:gsub("^%s*[Bb]asic%s+", "")
                  local dec = b64dec(b64 or "")
                  local colon = dec:find(":")
                  if colon and not params["client_id"] then
                    local cid = dec:sub(1, colon-1)
                    params["client_id"] = urlencode(cid)
                  end
                  h:remove("authorization")
                end

                -- Drop client_secret if present
                params["client_secret"] = nil

                -- Rebuild form body
                local out = {}
                for k,v in pairs(params) do
                  table.insert(out, k .. "=" .. v)
                end
                table.sort(out)
                local new_body = table.concat(out, "&")

                handle:requestBody(new_body)
                h:replace("content-length", tostring(#new_body))
              end